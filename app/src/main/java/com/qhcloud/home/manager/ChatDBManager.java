package com.qhcloud.home.manager;import android.content.ContentValues;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.util.Log;import com.qhcloud.home.entity.Message;import com.qhcloud.home.entity.SQLParam;import com.qhcloud.home.util.DateUtil;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * 聊天数据管理 * @author youngbin */public class ChatDBManager {    private static final String TAG = "ChatDBManager";    private DBHelper mDBHelper;    public ChatDBManager(DBHelper dbHelper) {        mDBHelper = dbHelper;    }    public synchronized List<Message> query() {        SQLiteDatabase db = mDBHelper.getReadableDatabase();        Cursor cursor = db.query(SQLParam.Chat.TABLE_NAME, null, null, null, null, null, null);        List<Message> messageList = parseMessageByCursor(cursor);        cursor.close();        return messageList;    }    public synchronized List<Message> queryById(int toId, int fromId) {        SQLiteDatabase db = mDBHelper.getReadableDatabase();        String param = "(to_id=? and from_id=?) or (to_id=? and from_id=?)";        Cursor cursor = db.query(SQLParam.Chat.TABLE_NAME, null,                param, new String[]{String.valueOf(toId), String.valueOf(fromId), String.valueOf(fromId), String.valueOf(toId)},                null, null, null);        List<Message> messageList = parseMessageByCursor(cursor);        cursor.close();        return messageList;    }    public synchronized Message queryById(long id) {        SQLiteDatabase db = mDBHelper.getReadableDatabase();        Cursor cursor = db.query(SQLParam.Chat.TABLE_NAME, null,                SQLParam.Chat.ID + "=?", new String[]{String.valueOf(id)}, null, null, null);        List<Message> messageList = parseMessageByCursor(cursor);        cursor.close();        return messageList != null && !messageList.isEmpty() ? messageList.get(0) : null;    }    public synchronized long update(Message message) {        if (message == null) {            return -1;        }        SQLiteDatabase db = mDBHelper.getWritableDatabase();        long result = -1;        Message query = queryById(message.getId());        ContentValues values = wrapMessage(message);        if (query == null) {            result = db.insert(SQLParam.Chat.TABLE_NAME, null, values);        } else {            result = db.update(SQLParam.Chat.TABLE_NAME, values,                    SQLParam.Chat.ID + "=?", new String[]{                            String.valueOf(message.getId())});        }        return result;    }    public synchronized long delete(long id) {        SQLiteDatabase db = mDBHelper.getWritableDatabase();        return db.delete(SQLParam.Chat.TABLE_NAME, SQLParam.Chat.ID                + "=?", new String[]{String.valueOf(id)});    }    public synchronized void clean() {        SQLiteDatabase db = mDBHelper.getWritableDatabase();        db.execSQL(SQLParam.Chat.CLEAN);    }    /**     * 消息装载     * @param message 消息     * @return ContentValues     */    private ContentValues wrapMessage(Message message) {        if (message == null) {            Log.i(TAG, "wrapMessage: message is null");            return null;        }        ContentValues values = new ContentValues();        values.put(SQLParam.Chat.FROM_ID, message.getFromId());        values.put(SQLParam.Chat.TO_ID, message.getToId());        values.put(SQLParam.Chat.DATA, message.getData());        values.put(SQLParam.Chat.CONTENT, message.getContent());        values.put(SQLParam.Chat.DATE, message.getDate());        values.put(SQLParam.Chat.TYPE, message.getType());        values.put(SQLParam.Chat.STATE, message.getState());        values.put(SQLParam.Chat.IS_READ, message.isRead() ? 1 : 0);        return values;    }    /**     * 消息解析     * @param cursor cursor     * @return 消息列表     */    private List<Message> parseMessageByCursor(Cursor cursor) {        if (cursor == null) {            return null;        }        List<Message> messageList = null;        int _id = cursor.getColumnIndex(SQLParam.Chat.ID);        int _from_id = cursor.getColumnIndex(SQLParam.Chat.FROM_ID);        int _to_id = cursor.getColumnIndex(SQLParam.Chat.TO_ID);        int _data = cursor.getColumnIndex(SQLParam.Chat.DATA);        int _content = cursor.getColumnIndex(SQLParam.Chat.CONTENT);        int _date = cursor.getColumnIndex(SQLParam.Chat.DATE);        int _type = cursor.getColumnIndex(SQLParam.Chat.TYPE);        int _state = cursor.getColumnIndex(SQLParam.Chat.STATE);        int _is_read = cursor.getColumnIndex(SQLParam.Chat.IS_READ);        while (cursor.moveToNext()) {            if (messageList == null) {                messageList = new ArrayList<>();            }            Message message = new Message();            message.setId(cursor.getLong(_id));            message.setFromId(cursor.getInt(_from_id));            message.setToId(cursor.getInt(_to_id));            message.setData(cursor.getBlob(_data));            message.setContent(cursor.getString(_content));            message.setDate(cursor.getLong(_date));            message.setType(cursor.getInt(_type));            message.setState(cursor.getInt(_state));            message.setRead(cursor.getInt(_is_read) > 0);            long date = message.getDate();            String dateText = DateUtil.getText(new Date(date * 1000));            message.setDateText(dateText);            messageList.add(message);        }        return messageList;    }}