package com.qhcloud.demo.manager;import android.content.ContentValues;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.util.Log;import com.qhcloud.demo.entity.SQLParam;import com.qhcloud.demo.entity.UserInfo;import java.util.ArrayList;import java.util.List;/** * 好友数据库管理 */public class FriendDBManager {	private static final String TAG = "FriendDBManager";	private DBHelper mDBHelper;	public FriendDBManager(DBHelper dbHelper) {		mDBHelper = dbHelper;	}	public synchronized List<UserInfo> query() {		SQLiteDatabase db = mDBHelper.getReadableDatabase();		Cursor cursor = db.query(SQLParam.Friend.TABLE_NAME, null, null, null, null, null, null);		List<UserInfo> userInfoList = parseUserInfoByCursor(cursor);		cursor.close();		return userInfoList;	}	public synchronized List<UserInfo> queryRobot(){		SQLiteDatabase db = mDBHelper.getReadableDatabase();		Cursor cursor = db.query(SQLParam.Friend.TABLE_NAME, null,				SQLParam.Friend.TYPE + "!=?", new String[]{"qlink"}, null, null, null);		List<UserInfo> userInfoList = parseUserInfoByCursor(cursor);		cursor.close();		return userInfoList;	}	public synchronized UserInfo queryById(int uid) {		SQLiteDatabase db = mDBHelper.getReadableDatabase();		Cursor cursor = db.query(SQLParam.Friend.TABLE_NAME, null,				SQLParam.Friend.UID + "=?", new String[]{String.valueOf(uid)}, null, null, null);		List<UserInfo> userInfoList = parseUserInfoByCursor(cursor);		cursor.close();		return userInfoList != null && !userInfoList.isEmpty() ? userInfoList.get(0) : null;	}	public synchronized long update(UserInfo userInfo) {		if (userInfo == null) {			return -1;		}		SQLiteDatabase db = mDBHelper.getWritableDatabase();		long result = -1;		UserInfo query = queryById(userInfo.getUid());		ContentValues values = wrapUserInfo(userInfo);		if (query == null) {			result = db.insert(SQLParam.Friend.TABLE_NAME, null, values);		} else {			result = db.update(SQLParam.Friend.TABLE_NAME, values,					SQLParam.Friend.UID + "=?", new String[]{							String.valueOf(userInfo.getUid())});		}		return result;	}	public synchronized long delete(int uid) {		SQLiteDatabase db = mDBHelper.getWritableDatabase();		return db.delete(SQLParam.Friend.TABLE_NAME, SQLParam.Friend.UID				+ "=?", new String[]{String.valueOf(uid)});	}	public synchronized void clean() {		SQLiteDatabase db = mDBHelper.getWritableDatabase();		db.execSQL(SQLParam.Friend.CLEAN);	}	private ContentValues wrapUserInfo(UserInfo userInfo) {		if (userInfo == null) {			Log.i(TAG, "wrapUserInfo: userInfo is null");			return null;		}		ContentValues values = new ContentValues();		values.put(SQLParam.Friend.UID, userInfo.getUid());		values.put(SQLParam.Friend.ACCOUNT, userInfo.getAccount());		values.put(SQLParam.Friend.TEL, userInfo.getTel());		values.put(SQLParam.Friend.NICKNAME, userInfo.getNickname());		values.put(SQLParam.Friend.REMARK, userInfo.getRemark());		values.put(SQLParam.Friend.SEX, userInfo.getSex());		values.put(SQLParam.Friend.BIRTHDAY, userInfo.getBirthday());		values.put(SQLParam.Friend.HEIGHT, userInfo.getHeight());		values.put(SQLParam.Friend.WEIGHT, userInfo.getWeight());		values.put(SQLParam.Friend.EMAIL, userInfo.getEmail());		values.put(SQLParam.Friend.AVATAR_ID, userInfo.getAvatarId());		values.put(SQLParam.Friend.AVATAR_URL, userInfo.getAvatarUrl());		values.put(SQLParam.Friend.TYPE, userInfo.getType());		values.put(SQLParam.Friend.PERMISSION, userInfo.getPermission());		values.put(SQLParam.Friend.REMARK_VERSION, userInfo.getRemarkVersion());		values.put(SQLParam.Friend.BASEINFO_VERSION, userInfo.getBaseVersion());		return values;	}	private List<UserInfo> parseUserInfoByCursor(Cursor cursor) {		if (cursor == null) {			return null;		}		List<UserInfo> userInfoList = null;		int _uid = cursor.getColumnIndex(SQLParam.Friend.UID);		int _account = cursor.getColumnIndex(SQLParam.Friend.ACCOUNT);		int _tel = cursor.getColumnIndex(SQLParam.Friend.TEL);		int _nickname = cursor.getColumnIndex(SQLParam.Friend.NICKNAME);		int _remark = cursor.getColumnIndex(SQLParam.Friend.REMARK);		int _sex = cursor.getColumnIndex(SQLParam.Friend.SEX);		int _birthday = cursor.getColumnIndex(SQLParam.Friend.BIRTHDAY);		int _height = cursor.getColumnIndex(SQLParam.Friend.HEIGHT);		int _weight = cursor.getColumnIndex(SQLParam.Friend.WEIGHT);		int _email = cursor.getColumnIndex(SQLParam.Friend.EMAIL);		int _avatar_id = cursor.getColumnIndex(SQLParam.Friend.AVATAR_ID);		int _avatar_url = cursor.getColumnIndex(SQLParam.Friend.AVATAR_URL);		int _type = cursor.getColumnIndex(SQLParam.Friend.TYPE);		int _permission = cursor.getColumnIndex(SQLParam.Friend.PERMISSION);		int _remark_version = cursor.getColumnIndex(SQLParam.Friend.REMARK_VERSION);		int _base_version = cursor.getColumnIndex(SQLParam.Friend.BASEINFO_VERSION);		while (cursor.moveToNext()) {			if (userInfoList == null) {				userInfoList = new ArrayList<>();			}			UserInfo userInfo = new UserInfo();			userInfo.setUid(cursor.getInt(_uid));			userInfo.setAccount(cursor.getString(_account));			userInfo.setTel(cursor.getString(_tel));			userInfo.setNickname(cursor.getString(_nickname));			userInfo.setRemark(cursor.getString(_remark));			userInfo.setSex(cursor.getInt(_sex));			userInfo.setBirthday(cursor.getString(_birthday));			userInfo.setHeight(cursor.getInt(_height));			userInfo.setWeight(cursor.getInt(_weight));			userInfo.setEmail(cursor.getString(_email));			userInfo.setAvatarId(cursor.getLong(_avatar_id));			userInfo.setAvatarUrl(cursor.getString(_avatar_url));			userInfo.setType(cursor.getString(_type));			userInfo.setPermission(cursor.getInt(_permission));			userInfo.setRemarkVersion(cursor.getInt(_remark_version));			userInfo.setBaseVersion(cursor.getInt(_base_version));			userInfoList.add(userInfo);		}		return userInfoList;	}}