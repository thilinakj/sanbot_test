package com.qhcloud.demo.manager.model;import android.content.Context;import android.util.Log;import com.qhcloud.demo.entity.UserInfo;import com.qhcloud.demo.manager.DBHelper;import com.qhcloud.demo.manager.FriendDBManager;import com.qhcloud.demo.manager.model.biz.IFriend;import com.qhcloud.demo.util.AppUtil;import com.qhcloud.net.BaseInfo;import com.qhcloud.net.DownloadFile;import java.util.List;public class FriendImp extends Base implements IFriend {    private static final String TAG = "FriendImp";    private FriendDBManager mFriendDBManager;    private FriendImp() {        super();    }    public FriendImp(Context context) {        this();        mFriendDBManager = new FriendDBManager(DBHelper.getInstance(context));    }    @Override    public int getFriendUids(long seq) {        return mNetApi.onGetFriendUIDs(seq);    }    @Override    public int getFriendRemarks(List<Integer> uids, long seq) {        return mNetApi.onGetFriendRemarks(uids, seq);    }    @Override    public int getFriendInfo(List<Integer> uids, long seq) {        return mNetApi.onGetFriendBaseInfos(uids, seq);    }    @Override    public int getAvatarUrlById(long id, long seq) {        DownloadFile downloadFile = new DownloadFile();        downloadFile.setFileId(id);        downloadFile.setFileType(1);        downloadFile.setThumbnails(0);        return mNetApi.onDownloadFiles(downloadFile, seq);    }    @Override    public List<UserInfo> query() {        return mFriendDBManager.query();    }    @Override    public List<UserInfo> queryRobot() {        return mFriendDBManager.queryRobot();    }    @Override    public UserInfo queryById(int uid) {        return mFriendDBManager.queryById(uid);    }    @Override    public long update(UserInfo userInfo) {        return mFriendDBManager.update(userInfo);    }    @Override    public long updateBaseInfo(BaseInfo baseInfo, int baseInfoVersion) {        if (baseInfo == null) {            Log.i(TAG, "updateBaseInfo param error");            return -1;        }        UserInfo userInfo = queryById(baseInfo.getUid());        if (userInfo == null) {            userInfo = new UserInfo();        }        userInfo.setUid(baseInfo.getUid());        userInfo.setAccount(baseInfo.getAccount());        userInfo.setTel(baseInfo.getTel());        userInfo.setNickname(baseInfo.getAlias());        userInfo.setSex(baseInfo.getSex());        userInfo.setBirthday(baseInfo.getBirthday());        userInfo.setHeight(baseInfo.getHeight());        userInfo.setWeight(baseInfo.getWeight());        userInfo.setEmail(baseInfo.getMail());        userInfo.setAvatarId(AppUtil.parseLong(baseInfo.getLogoUrl()));        userInfo.setType(baseInfo.getType());        userInfo.setPermission(baseInfo.getPermission());        userInfo.setBaseVersion(baseInfoVersion);        return mFriendDBManager.update(userInfo);    }    @Override    public long updateRemark(int uid, String remark, int remarkVersion) {        if (uid < 0) {            Log.i(TAG, "updateRemark: uid < 0");            return -1;        }        UserInfo userInfo = queryById(uid);        if (userInfo == null) {            userInfo = new UserInfo();        }        userInfo.setUid(uid);        userInfo.setRemark(remark);        userInfo.setRemarkVersion(remarkVersion);        return mFriendDBManager.update(userInfo);    }    @Override    public long updateAvatarUrl(int uid, String avatar) {        if (uid < 0) {            Log.i(TAG, "updateAvatarUrl: uid < 0");            return -1;        }        UserInfo userInfo = queryById(uid);        if (userInfo == null) {            userInfo = new UserInfo();        }        userInfo.setUid(uid);        userInfo.setAvatarUrl(avatar);        return mFriendDBManager.update(userInfo);    }    @Override    public long deleteById(int uid) {        return mFriendDBManager.delete(uid);    }    @Override    public void clean() {        mFriendDBManager.clean();    }}